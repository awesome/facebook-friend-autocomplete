// Generated by CoffeeScript 1.4.0
(function() {

  (function($, window, document) {
    var Plugin, defaults, pluginName;
    pluginName = "facebookAutocomplete";
    defaults = {
      showAvatars: true,
      avatarSize: 32,
      maxSuggestions: 6
    };
    Plugin = (function() {

      function Plugin(element, options) {
        var onpick;
        this.element = element;
        if (typeof options === 'function') {
          onpick = options;
          options = {
            onpick: onpick
          };
        }
        this.element = $(this.element);
        this.settings = $.extend({}, defaults, options);
        this._defaults = defaults;
        this._name = pluginName;
        this.init();
      }

      Plugin.prototype.init = function() {
        var _this = this;
        this.friends = this.getFriendList();
        this.list = this.createSuggestionList();
        this.element.on('keyup.fbac', function(e) {
          switch (e.which) {
            case 40:
              return _this.pickChange('down');
            case 38:
              return _this.pickChange('up');
            case 13:
              return _this.submit();
            default:
              return _this.filter($(e.currentTarget).val());
          }
        });
        this.list.on('click', '.fbac-suggestion', function(e) {
          _this.selected = $(e.currentTarget);
          return _this.submit();
        });
        return this.list.on('mouseover', '.fbac-suggestion', function(e) {
          _this.selected.removeClass('fbac-selected');
          return _this.selected = $(e.currentTarget).addClass('fbac-selected');
        });
      };

      Plugin.prototype.getFriendList = function() {
        var friends,
          _this = this;
        friends = [];
        FB.api('/me/friends/?fields=name', function(response) {
          var friend, i, _i, _len, _ref, _results;
          _ref = response.data;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            friend = _ref[i];
            _results.push(friends.push({
              index: i,
              id: friend.id,
              name: friend.name,
              picture: _this.settings.showAvatars ? "http://graph.facebook.com/" + friend.id + "/picture?width=" + _this.settings.avatarSize + "&height=" + _this.settings.avatarSize : void 0
            }));
          }
          return _results;
        });
        return friends;
      };

      Plugin.prototype.createSuggestionList = function() {
        var $suggestionList;
        $suggestionList = $('<div>').addClass('fbac-suggestion-list');
        $suggestionList.css({
          position: 'absolute',
          left: this.element.position().left,
          width: this.element.innerWidth()
        });
        $suggestionList.insertAfter(this.element);
        return $suggestionList;
      };

      Plugin.prototype.getCurrentSuggestions = function(value) {
        var index, suggestions;
        value = value.toLowerCase();
        suggestions = [];
        index = 0;
        while (suggestions.length < this.settings.maxSuggestions && index < this.friends.length) {
          if (this.friends[index].name.toLowerCase().indexOf(value) > -1) {
            suggestions.push(this.friends[index]);
          }
          index++;
        }
        return suggestions;
      };

      Plugin.prototype.generateSuggestion = function(suggestion) {
        var $avatar, $name, $suggestion;
        $suggestion = $('<div>').addClass('fbac-suggestion').data('index', suggestion.index);
        $name = $('<span>').addClass('fbac-suggestion-name').text(suggestion.name);
        if (this.settings.showAvatars) {
          $avatar = $('<img>').addClass('fbac-suggestion-avatar').attr('src', suggestion.picture);
          $avatar.appendTo($suggestion);
        }
        $name.appendTo($suggestion);
        return $suggestion;
      };

      Plugin.prototype.filter = function(value) {
        var suggestion, suggestions, _i, _len;
        this.list.empty();
        if (value !== '') {
          suggestions = this.getCurrentSuggestions(value);
          for (_i = 0, _len = suggestions.length; _i < _len; _i++) {
            suggestion = suggestions[_i];
            this.list.append(this.generateSuggestion(suggestion));
          }
          return this.selected = this.list.children('.fbac-suggestion:first').addClass('fbac-selected');
        }
      };

      Plugin.prototype.pickChange = function(dir) {
        var $target;
        $target = this.selected[dir === 'down' ? 'next' : 'prev']('.fbac-suggestion');
        if ($target.length > 0) {
          this.selected.removeClass('fbac-selected');
          return this.selected = $target.addClass('fbac-selected');
        }
      };

      Plugin.prototype.submit = function() {
        var pickIndex;
        pickIndex = this.selected.data('index');
        this.settings.onpick(this.friends[pickIndex]);
        this.element.off('keyup.fbac');
        return this.list.remove();
      };

      return Plugin;

    })();
    return $.fn[pluginName] = function(options) {
      return this.each(function() {
        if (!$.data(this, "plugin_" + pluginName)) {
          return $.data(this, "plugin_" + pluginName, new Plugin(this, options));
        }
      });
    };
  })(jQuery, window, document);

}).call(this);
